{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap ccc7dff59b7851fed836","webpack:///./src/index.ts","webpack:///external \"angular\"","webpack:///./src/star-rating.controller.ts","webpack:///./src/star-rating.component.ts","webpack:///./src/star-rating.tpl.html"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","Object","defineProperty","value","star_rating_controller_1","star_rating_component_1","star_rating_controller_2","StarRatingController","star_rating_component_2","StarRatingComponent","angularStars","angular","controller","component","name","this","classEmpty","DefaultClassEmpty","classHalf","DefaultClassHalf","classFilled","DefaultClassFilled","pathEmpty","DefaultSvgPathEmpty","pathHalf","DefaultSvgPathHalf","pathFilled","DefaultSvgPathFilled","_showHoverStars","DefaultShowHoverStars","labelHidden","DefaultLabelHidden","_numOfStars","DefaultNumOfStars","stars","_getStarsArray","numOfStars","setColor","i","push","_getHalfStarVisible","rating","Math","abs","_getColor","staticColor","fractionSize","color","prototype","get","set","enumerable","configurable","_rating","undefined","newRating","ratingAsInteger","parseInt","toString","setHalfStarVisible","$event","onRatingChange","_showHalfStars","_disabled","_readOnly","_space","_starType","DefaultStarType","_size","DefaultSize","_speed","DefaultSpeed","_labelPosition","DefaultLabelPosition","_labelHidden","_staticColor","_labelText","_id","random","getComponentClassNames","classNames","showHoverStars","hoverRating","halfStarVisible","space","labelPosition","starType","speed","size","readOnly","disabled","join","svgVisible","getColor","showHalfStars","getHalfStarVisible","$onChanges","changes","valueChanged","key","currentValue","previousValue","labelText","onStarClicked","interactionPossible","onClick","onStarHover","onHover","getClosest","elem","selector","Element","matches","matchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","s","document","ownerDocument","querySelectorAll","length","item","parentNode","DefaultAssetsPath","DefaultSvgPath","DefaultSvgEmptySymbolId","DefaultSvgHalfSymbolId","DefaultSvgFilledSymbolId","starRatingTpl","bindings","replace","templateUrl","path","html","window","run","put"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\t__webpack_require__(1);\r\n\tvar star_rating_controller_1 = __webpack_require__(2);\r\n\tvar star_rating_component_1 = __webpack_require__(3);\r\n\tvar styles = styles;\r\n\tvar icons = icons;\r\n\tvar star_rating_controller_2 = __webpack_require__(2);\r\n\texports.StarRatingController = star_rating_controller_2.StarRatingController;\r\n\tvar star_rating_component_2 = __webpack_require__(3);\r\n\texports.StarRatingComponent = star_rating_component_2.StarRatingComponent;\r\n\texports.angularStars = angular\r\n\t    .module('star-rating', [])\r\n\t    .controller('starRatingCtrl', star_rating_controller_1.StarRatingController)\r\n\t    .component('starRatingComp', new star_rating_component_1.StarRatingComponent())\r\n\t    .name;\r\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = angular;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar StarRatingController = (function () {\r\n\t    function StarRatingController() {\r\n\t        //set default ctrl props\r\n\t        this.classEmpty = StarRatingController.DefaultClassEmpty;\r\n\t        this.classHalf = StarRatingController.DefaultClassHalf;\r\n\t        this.classFilled = StarRatingController.DefaultClassFilled;\r\n\t        this.pathEmpty = StarRatingController.DefaultSvgPathEmpty;\r\n\t        this.pathHalf = StarRatingController.DefaultSvgPathHalf;\r\n\t        this.pathFilled = StarRatingController.DefaultSvgPathFilled;\r\n\t        //set default Component Inputs\r\n\t        this._showHoverStars = StarRatingController.DefaultShowHoverStars;\r\n\t        this.labelHidden = StarRatingController.DefaultLabelHidden;\r\n\t        this._numOfStars = StarRatingController.DefaultNumOfStars;\r\n\t        this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n\t        this.setColor();\r\n\t        //set default Outputs\r\n\t    }\r\n\t    /**\r\n\t     * _getStarsArray\r\n\t     *\r\n\t     * returns an array of increasing numbers starting at 1\r\n\t     *\r\n\t     * @param numOfStars\r\n\t     * @returns {Array}\r\n\t     */\r\n\t    StarRatingController._getStarsArray = function (numOfStars) {\r\n\t        var stars = [];\r\n\t        for (var i = 0; i < numOfStars; i++) {\r\n\t            stars.push(i + 1);\r\n\t        }\r\n\t        return stars;\r\n\t    };\r\n\t    /**\r\n\t     * _getHalfStarVisible\r\n\t     *\r\n\t     * Returns true if there should be a half star visible, and false if not.\r\n\t     *\r\n\t     * @param rating\r\n\t     * @returns {boolean}\r\n\t     */\r\n\t    StarRatingController._getHalfStarVisible = function (rating) {\r\n\t        return Math.abs(rating % 1) > 0;\r\n\t    };\r\n\t    /**\r\n\t     * _getColor\r\n\t     *\r\n\t     * The default function for color calculation\r\n\t     * based on the current rating and the the number of stars possible.\r\n\t     * If a staticColor is set the function will use it as return value.\r\n\t     *\r\n\t     * @param rating\r\n\t     * @param numOfStars\r\n\t     * @param staticColor\r\n\t     * @returns {starRatingColors}\r\n\t     */\r\n\t    StarRatingController._getColor = function (rating, numOfStars, staticColor) {\r\n\t        rating = rating || 0;\r\n\t        //if a fix color is set use this one\r\n\t        if (staticColor) {\r\n\t            return staticColor;\r\n\t        }\r\n\t        //calculate size of smallest fraction\r\n\t        var fractionSize = numOfStars / 3;\r\n\t        //apply color by fraction\r\n\t        var color = 'default';\r\n\t        if (rating > 0) {\r\n\t            color = 'negative';\r\n\t        }\r\n\t        if (rating > fractionSize) {\r\n\t            color = 'ok';\r\n\t        }\r\n\t        if (rating > fractionSize * 2) {\r\n\t            color = 'positive';\r\n\t        }\r\n\t        return color;\r\n\t    };\r\n\t    Object.defineProperty(StarRatingController.prototype, \"numOfStars\", {\r\n\t        get: function () {\r\n\t            return this._numOfStars || StarRatingController.DefaultNumOfStars;\r\n\t        },\r\n\t        //getter and setter\r\n\t        set: function (value) {\r\n\t            this._numOfStars = (value > 0) ? value : StarRatingController.DefaultNumOfStars;\r\n\t            //update stars array\r\n\t            this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n\t            //update color\r\n\t            this.setColor();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"rating\", {\r\n\t        get: function () {\r\n\t            return this._rating;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            if (value === undefined) {\r\n\t                return;\r\n\t            }\r\n\t            //validate and apply newRating\r\n\t            var newRating = 0;\r\n\t            if (value >= 0\r\n\t                && value <= this.numOfStars) {\r\n\t                newRating = value;\r\n\t            }\r\n\t            //limit max value to max number of stars\r\n\t            if (value > this.numOfStars) {\r\n\t                newRating = this.numOfStars;\r\n\t            }\r\n\t            this._rating = newRating;\r\n\t            //update ratingAsInteger. rating parsed to int for the value-[n] modifier\r\n\t            this.ratingAsInteger = parseInt(this._rating.toString());\r\n\t            //update halfStarsVisible\r\n\t            this.setHalfStarVisible();\r\n\t            //update calculated Color\r\n\t            this.setColor();\r\n\t            //fire onRatingChange event\r\n\t            var $event = { rating: this._rating };\r\n\t            if (typeof this.onRatingChange === 'function') {\r\n\t                this.onRatingChange({ $event: $event });\r\n\t            }\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"showHalfStars\", {\r\n\t        get: function () {\r\n\t            return this._showHalfStars;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._showHalfStars = !!value;\r\n\t            //update halfStarVisible\r\n\t            this.setHalfStarVisible();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"showHoverStars\", {\r\n\t        get: function () {\r\n\t            return this._showHoverStars;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._showHoverStars = !!value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"disabled\", {\r\n\t        get: function () {\r\n\t            return this._disabled;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._disabled = !!value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"readOnly\", {\r\n\t        get: function () {\r\n\t            return this._readOnly;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._readOnly = !!value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"space\", {\r\n\t        get: function () {\r\n\t            return this._space;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._space = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"starType\", {\r\n\t        get: function () {\r\n\t            return this._starType;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._starType = value || StarRatingController.DefaultStarType;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"size\", {\r\n\t        get: function () {\r\n\t            return this._size;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._size = value || StarRatingController.DefaultSize;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"speed\", {\r\n\t        get: function () {\r\n\t            return this._speed;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._speed = value || StarRatingController.DefaultSpeed;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"labelPosition\", {\r\n\t        get: function () {\r\n\t            return this._labelPosition;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._labelPosition = value || StarRatingController.DefaultLabelPosition;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"labelHidden\", {\r\n\t        get: function () {\r\n\t            return this._labelHidden;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._labelHidden = !!value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"staticColor\", {\r\n\t        get: function () {\r\n\t            return this._staticColor;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._staticColor = value || undefined;\r\n\t            //update color.\r\n\t            this.setColor();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"labelText\", {\r\n\t        get: function () {\r\n\t            return this._labelText;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._labelText = value;\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    Object.defineProperty(StarRatingController.prototype, \"id\", {\r\n\t        get: function () {\r\n\t            return this._id;\r\n\t        },\r\n\t        set: function (value) {\r\n\t            this._id = value || (Math.random() * 10000).toString();\r\n\t        },\r\n\t        enumerable: true,\r\n\t        configurable: true\r\n\t    });\r\n\t    StarRatingController.prototype.getComponentClassNames = function () {\r\n\t        var classNames = [];\r\n\t        classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');\r\n\t        classNames.push(this.showHoverStars ? 'hover' : '');\r\n\t        classNames.push(this.hoverRating ? 'hover-' + this.hoverRating : 'hover-0');\r\n\t        classNames.push(this.halfStarVisible ? 'half' : '');\r\n\t        classNames.push(this.space ? 'space-' + this.space : '');\r\n\t        classNames.push(this.labelHidden ? 'label-hidden' : 'label-visible');\r\n\t        classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');\r\n\t        classNames.push(this.color ? 'color-' + this.color : '');\r\n\t        classNames.push(this.starType ? 'star-' + this.starType : '');\r\n\t        classNames.push(this.speed);\r\n\t        classNames.push(this.size);\r\n\t        classNames.push(this.readOnly ? 'read-only' : '');\r\n\t        classNames.push(this.disabled ? 'disabled' : '');\r\n\t        return classNames.join(' ');\r\n\t    };\r\n\t    StarRatingController.prototype.svgVisible = function () {\r\n\t        return this.starType === \"svg\";\r\n\t    };\r\n\t    StarRatingController.prototype.setColor = function () {\r\n\t        //check if custom function is given\r\n\t        if (typeof this.getColor === \"function\") {\r\n\t            this.color = this.getColor(this.rating, this.numOfStars, this.staticColor);\r\n\t        }\r\n\t        else {\r\n\t            this.color = StarRatingController._getColor(this.rating, this.numOfStars, this.staticColor);\r\n\t        }\r\n\t    };\r\n\t    StarRatingController.prototype.setHalfStarVisible = function () {\r\n\t        //update halfStarVisible\r\n\t        if (this.showHalfStars) {\r\n\t            //check if custom function is given\r\n\t            if (typeof this.getHalfStarVisible === \"function\") {\r\n\t                this.halfStarVisible = this.getHalfStarVisible(this.rating);\r\n\t            }\r\n\t            else {\r\n\t                this.halfStarVisible = StarRatingController._getHalfStarVisible(this.rating);\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            this.halfStarVisible = false;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * $onChanges\r\n\t     *\r\n\t     * The components $onChange hook\r\n\t     *\r\n\t     * @param changes\r\n\t     */\r\n\t    StarRatingController.prototype.$onChanges = function (changes) {\r\n\t        var valueChanged = function (key, changes) {\r\n\t            if (key in changes) {\r\n\t                if (\r\n\t                //(changes[key].previousValue != 'UNINITIALIZED_VALUE' && changes[key].currentValue !== undefined)\r\n\t                changes[key].currentValue != changes[key].previousValue) {\r\n\t                    return true;\r\n\t                }\r\n\t            }\r\n\t            return false;\r\n\t        };\r\n\t        //---------------------------------------\r\n\t        //functions\r\n\t        //@Notice For some reason callback functions is not defined even there are defaults in the constructor\r\n\t        if (valueChanged('getColor', changes)) {\r\n\t            this.getColor = changes.getColor.currentValue;\r\n\t            this.setColor();\r\n\t        }\r\n\t        if (valueChanged('getHalfStarVisible', changes)) {\r\n\t            this.getHalfStarVisible = changes.getHalfStarVisible.currentValue;\r\n\t            this.setHalfStarVisible();\r\n\t        }\r\n\t        //boolean\r\n\t        if (valueChanged('showHalfStars', changes)) {\r\n\t            this.showHalfStars = changes.showHalfStars.currentValue;\r\n\t        }\r\n\t        if (valueChanged('space', changes)) {\r\n\t            this.space = changes.space.currentValue;\r\n\t        }\r\n\t        if (valueChanged('readOnly', changes)) {\r\n\t            this.readOnly = changes.readOnly.currentValue;\r\n\t        }\r\n\t        if (valueChanged('disabled', changes)) {\r\n\t            this.disabled = changes.disabled.currentValue;\r\n\t        }\r\n\t        if (valueChanged('labelHidden', changes)) {\r\n\t            this.labelHidden = changes.labelHidden.currentValue;\r\n\t        }\r\n\t        //number\r\n\t        if (valueChanged('rating', changes)) {\r\n\t            this.rating = changes.rating.currentValue;\r\n\t        }\r\n\t        if (valueChanged('numOfStars', changes)) {\r\n\t            this.numOfStars = changes.numOfStars.currentValue;\r\n\t        }\r\n\t        //string\r\n\t        if (valueChanged('labelText', changes)) {\r\n\t            this.labelText = changes.labelText.currentValue;\r\n\t        }\r\n\t        if (valueChanged('staticColor', changes)) {\r\n\t            this.staticColor = changes.staticColor.currentValue;\r\n\t        }\r\n\t        if (valueChanged('size', changes)) {\r\n\t            this.size = changes.size.currentValue;\r\n\t        }\r\n\t        if (valueChanged('speed', changes)) {\r\n\t            this.speed = changes.speed.currentValue;\r\n\t        }\r\n\t        if (valueChanged('labelPosition', changes)) {\r\n\t            this.labelPosition = changes.labelPosition.currentValue;\r\n\t        }\r\n\t        if (valueChanged('starType', changes)) {\r\n\t            this.starType = changes.starType.currentValue;\r\n\t        }\r\n\t    };\r\n\t    /**\r\n\t     * onStarClicked\r\n\t     *\r\n\t     * Is fired when a star is clicked. And updated the rating value.\r\n\t     * This function returns if the disabled or readOnly\r\n\t     * property is set. If provided it emits the onClick event\r\n\t     * handler with the actual rating value.\r\n\t     *\r\n\t     * @param rating\r\n\t     */\r\n\t    StarRatingController.prototype.onStarClicked = function (rating) {\r\n\t        if (!this.interactionPossible()) {\r\n\t            return;\r\n\t        }\r\n\t        this.rating = rating;\r\n\t        //fire onClick event\r\n\t        var $event = { rating: rating };\r\n\t        if (typeof this.onClick === 'function') {\r\n\t            this.onClick({ $event: $event });\r\n\t        }\r\n\t    };\r\n\t    StarRatingController.prototype.onStarHover = function (rating) {\r\n\t        if (!this.interactionPossible() || !this.showHoverStars) {\r\n\t            return;\r\n\t        }\r\n\t        this.hoverRating = rating ? parseInt(rating.toString()) : 0;\r\n\t        //fire onHover event\r\n\t        var $event = { hoverRating: this.hoverRating };\r\n\t        if (typeof this.onHover === 'function') {\r\n\t            this.onHover({ $event: $event });\r\n\t        }\r\n\t    };\r\n\t    StarRatingController.prototype.interactionPossible = function () {\r\n\t        return !this.readOnly && !this.disabled;\r\n\t    };\r\n\t    /**\r\n\t     * Get the closest matching element up the DOM tree.\r\n\t     * @private\r\n\t     * @param  {Element} elem     Starting element\r\n\t     * @param  {String}  selector Selector to match against\r\n\t     * @return {Boolean|Element}  Returns null if not match found\r\n\t     */\r\n\t    StarRatingController.prototype.getClosest = function (elem, selector) {\r\n\t        // Element.matches() polyfill\r\n\t        if (!Element.prototype.matches) {\r\n\t            Element.prototype.matches =\r\n\t                Element.prototype.matchesSelector ||\r\n\t                    Element.prototype.mozMatchesSelector ||\r\n\t                    Element.prototype.msMatchesSelector ||\r\n\t                    Element.prototype.oMatchesSelector ||\r\n\t                    Element.prototype.webkitMatchesSelector ||\r\n\t                    function (s) {\r\n\t                        var matches = (this.document || this.ownerDocument).querySelectorAll(s), i = matches.length;\r\n\t                        while (--i >= 0 && matches.item(i) !== this) {\r\n\t                        }\r\n\t                        return i > -1;\r\n\t                    };\r\n\t        }\r\n\t        // Get closest match\r\n\t        for (; elem && elem !== document; elem = elem.parentNode) {\r\n\t            if (elem.matches(selector))\r\n\t                return elem;\r\n\t        }\r\n\t        return null;\r\n\t    };\r\n\t    StarRatingController.DefaultClassEmpty = \"default-star-empty-icon\";\r\n\t    StarRatingController.DefaultClassHalf = \"default-star-half-icon\";\r\n\t    StarRatingController.DefaultClassFilled = \"default-star-filled-icon\";\r\n\t    StarRatingController.DefaultNumOfStars = 5;\r\n\t    StarRatingController.DefaultShowHoverStars = false;\r\n\t    StarRatingController.DefaultSize = \"medium\";\r\n\t    StarRatingController.DefaultSpeed = \"noticeable\";\r\n\t    StarRatingController.DefaultLabelPosition = \"left\";\r\n\t    StarRatingController.DefaultLabelHidden = false;\r\n\t    StarRatingController.DefaultStarType = \"svg\";\r\n\t    StarRatingController.DefaultAssetsPath = \"img/\";\r\n\t    StarRatingController.DefaultSvgPath = StarRatingController.DefaultAssetsPath + \"star-rating.icons.svg\";\r\n\t    StarRatingController.DefaultSvgEmptySymbolId = \"star-empty\";\r\n\t    StarRatingController.DefaultSvgHalfSymbolId = \"star-half\";\r\n\t    StarRatingController.DefaultSvgFilledSymbolId = \"star-filled\";\r\n\t    StarRatingController.DefaultSvgPathEmpty = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgEmptySymbolId;\r\n\t    StarRatingController.DefaultSvgPathHalf = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgHalfSymbolId;\r\n\t    StarRatingController.DefaultSvgPathFilled = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgFilledSymbolId;\r\n\t    return StarRatingController;\r\n\t}());\r\n\texports.StarRatingController = StarRatingController;\r\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\r\n\tvar star_rating_controller_1 = __webpack_require__(2);\r\n\tvar starRatingTpl = __webpack_require__(4);\r\n\tvar StarRatingComponent = (function () {\r\n\t    function StarRatingComponent() {\r\n\t        this.bindings = {\r\n\t            id: '<',\r\n\t            rating: '<',\r\n\t            showHalfStars: '<',\r\n\t            showHoverStars: '<',\r\n\t            numOfStars: '<',\r\n\t            size: '<',\r\n\t            space: '<',\r\n\t            staticColor: '<',\r\n\t            disabled: '<',\r\n\t            starType: '<',\r\n\t            labelText: '<',\r\n\t            labelHidden: '<',\r\n\t            labelPosition: '<',\r\n\t            speed: '<',\r\n\t            readOnly: '<',\r\n\t            getColor: '<',\r\n\t            getHalfStarVisible: '<',\r\n\t            onHover: '&',\r\n\t            onClick: '&',\r\n\t            onRatingChange: '&'\r\n\t        };\r\n\t        this.replace = true;\r\n\t        this.controller = star_rating_controller_1.StarRatingController;\r\n\t        this.templateUrl = starRatingTpl;\r\n\t    }\r\n\t    return StarRatingComponent;\r\n\t}());\r\n\texports.StarRatingComponent = StarRatingComponent;\r\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n\tvar path = 'src/star-rating.tpl.html';\n\tvar html = \"<div id={{$ctrl.id}} class=rating ng-class=$ctrl.getComponentClassNames()> <div ng-show=$ctrl.labelText class=label-value>{{$ctrl.labelText}}</div> <div class=star-container ng-mouseleave=$ctrl.onStarHover()> <div class=star ng-repeat=\\\"star in $ctrl.stars track by $index\\\" ng-click=$ctrl.onStarClicked(star) ng-mouseover=$ctrl.onStarHover(star)> <i class=\\\"star-empty {{$ctrl.classEmpty}}\\\" ng-if=!$ctrl.svgVisible()></i> <i class=\\\"star-half {{$ctrl.classHalf}}\\\" ng-if=!$ctrl.svgVisible()></i> <i class=\\\"star-filled {{$ctrl.classFilled}}\\\" ng-if=!$ctrl.svgVisible()></i> <svg class=\\\"star-empty {{$ctrl.classEmpty}}\\\" ng-if=$ctrl.svgVisible()> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathEmpty}}></use> </svg> <svg class=\\\"star-half {{$ctrl.classHalf}}\\\" ng-if=$ctrl.svgVisible()> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathHalf}}></use> </svg> <svg class=\\\"star-filled {{$ctrl.classFilled}}\\\" ng-if=$ctrl.svgVisible()> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathFilled}}></use> </svg> </div> </div> </div>\";\n\twindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\n\tmodule.exports = path;\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap ccc7dff59b7851fed836","import \"angular\";\r\n\r\nimport {StarRatingController} from \"./star-rating.controller\";\r\nimport {StarRatingComponent} from \"./star-rating.component\";\r\n\r\nimport styles = require('css-star-rating/dist/scss/star-rating.scss');\r\nimport icons = require('css-star-rating/dist/images/star-rating.icons.svg');\r\nconst styles = styles;\r\nconst icons = icons;\r\n\r\nexport {\r\n      starRatingSizes\r\n    , starRatingColors\r\n    , starRatingSpeed\r\n    , starRatingPosition\r\n    , starRatingStarTypes\r\n    , starRatingStarSpace\r\n    , IStarRatingCompBindings\r\n    , IStarRatingOnClickEvent\r\n    , IStarRatingOnUpdateEvent\r\n} from \"./star-rating.structs\"\r\nexport {StarRatingController} from \"./star-rating.controller\";\r\nexport {StarRatingComponent} from \"./star-rating.component\";\r\n\r\nexport const angularStars = angular\r\n    .module('star-rating', [])\r\n    .controller('starRatingCtrl', StarRatingController)\r\n    .component('starRatingComp', new StarRatingComponent())\r\n    .name;\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts","module.exports = angular;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"angular\"\n// module id = 1\n// module chunks = 0","import {\r\n    IStarRatingCompBindings\r\n    , starRatingSizes\r\n    , starRatingSpeed\r\n    , starRatingPosition\r\n    , starRatingStarTypes\r\n    , starRatingColors\r\n    , starRatingStarSpace\r\n    , IStarRatingOnClickEvent\r\n    , IStarRatingOnUpdateEvent, IStarRatingOnHoverEvent\r\n} from \"star-rating.structs\"\r\n\r\nexport class StarRatingController implements ng.IComponentController, IStarRatingCompBindings {\r\n\r\n    static DefaultClassEmpty: string = \"default-star-empty-icon\";\r\n\r\n    static DefaultClassHalf: string = \"default-star-half-icon\";\r\n\r\n    static DefaultClassFilled: string = \"default-star-filled-icon\";\r\n\r\n    static DefaultNumOfStars: number = 5;\r\n\r\n    static DefaultShowHoverStars:boolean = false;\r\n\r\n    static DefaultSize: starRatingSizes = \"medium\";\r\n\r\n    static DefaultSpeed: starRatingSpeed = \"noticeable\";\r\n\r\n    static DefaultLabelPosition: starRatingPosition = \"left\";\r\n\r\n    static DefaultLabelHidden: boolean = false;\r\n\r\n    static DefaultStarType: starRatingStarTypes = \"svg\";\r\n\r\n    static DefaultAssetsPath: string = \"img/\";\r\n\r\n    static DefaultSvgPath: string = StarRatingController.DefaultAssetsPath + \"star-rating.icons.svg\";\r\n    static DefaultSvgEmptySymbolId: string = \"star-empty\";\r\n    static DefaultSvgHalfSymbolId: string = \"star-half\";\r\n    static DefaultSvgFilledSymbolId: string = \"star-filled\";\r\n\r\n    static DefaultSvgPathEmpty: string = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgEmptySymbolId;\r\n\r\n    static DefaultSvgPathHalf: string = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgHalfSymbolId;\r\n\r\n    static DefaultSvgPathFilled: string = StarRatingController.DefaultSvgPath + \"#\" + StarRatingController.DefaultSvgFilledSymbolId;\r\n\r\n\r\n    /**\r\n     * _getStarsArray\r\n     *\r\n     * returns an array of increasing numbers starting at 1\r\n     *\r\n     * @param numOfStars\r\n     * @returns {Array}\r\n     */\r\n    static _getStarsArray(numOfStars: number): Array<number> {\r\n        let stars = [];\r\n        for (let i = 0; i < numOfStars; i++) {\r\n            stars.push(i + 1);\r\n        }\r\n        return stars;\r\n    }\r\n\r\n    /**\r\n     * _getHalfStarVisible\r\n     *\r\n     * Returns true if there should be a half star visible, and false if not.\r\n     *\r\n     * @param rating\r\n     * @returns {boolean}\r\n     */\r\n    static _getHalfStarVisible(rating: number): boolean {\r\n        return Math.abs(rating % 1) > 0;\r\n    }\r\n\r\n    /**\r\n     * _getColor\r\n     *\r\n     * The default function for color calculation\r\n     * based on the current rating and the the number of stars possible.\r\n     * If a staticColor is set the function will use it as return value.\r\n     *\r\n     * @param rating\r\n     * @param numOfStars\r\n     * @param staticColor\r\n     * @returns {starRatingColors}\r\n     */\r\n    static _getColor(rating: number, numOfStars: number, staticColor?: starRatingColors): starRatingColors {\r\n        rating = rating || 0;\r\n\r\n        //if a fix color is set use this one\r\n        if (staticColor) {\r\n            return staticColor;\r\n        }\r\n\r\n        //calculate size of smallest fraction\r\n        let fractionSize = numOfStars / 3;\r\n\r\n        //apply color by fraction\r\n        let color: starRatingColors = 'default';\r\n        if (rating > 0) {\r\n            color = 'negative';\r\n        }\r\n        if (rating > fractionSize) {\r\n            color = 'ok';\r\n        }\r\n        if (rating > fractionSize * 2) {\r\n            color = 'positive';\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n\r\n    //bindings\r\n\r\n    //inputs\r\n    protected _id: string;\r\n    protected _labelText: string;\r\n    protected _staticColor: starRatingColors;\r\n    protected _labelPosition: starRatingPosition;\r\n    protected _labelHidden: boolean;\r\n    protected _speed: starRatingSpeed;\r\n    protected _size: starRatingSizes;\r\n    protected _starType: starRatingStarTypes;\r\n    protected _space: starRatingStarSpace;\r\n    protected _readOnly: boolean;\r\n    protected _disabled: boolean;\r\n    protected _showHalfStars: boolean;\r\n    protected _showHoverStars: boolean;\r\n    protected _rating: number;\r\n    protected _numOfStars: number;\r\n    getHalfStarVisible: (rating: number) => boolean;\r\n    getColor: (rating: number, numOfStars: number, staticColor?: starRatingColors) => starRatingColors;\r\n\r\n    //outputs\r\n    onHover?: ($event: any) =>  IStarRatingOnHoverEvent;\r\n    onClick?: ($event: any) =>  IStarRatingOnClickEvent;\r\n    onRatingChange?: ($event: any) => IStarRatingOnUpdateEvent;\r\n\r\n    //ctrl only\r\n    classEmpty: string;\r\n    classHalf: string;\r\n    classFilled: string;\r\n\r\n    pathEmpty: string;\r\n    pathHalf: string;\r\n    pathFilled: string;\r\n\r\n    color: starRatingColors;\r\n    stars: Array<number>;\r\n    hoverRating:number;\r\n    ratingAsInteger: number;\r\n    halfStarVisible: boolean;\r\n\r\n    //getter and setter\r\n    set numOfStars(value: number) {\r\n        this._numOfStars = (value > 0)?value:StarRatingController.DefaultNumOfStars;\r\n\r\n        //update stars array\r\n        this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n\r\n        //update color\r\n        this.setColor();\r\n    }\r\n    get numOfStars(): number {\r\n        return this._numOfStars || StarRatingController.DefaultNumOfStars;\r\n    }\r\n\r\n    set rating(value: number) {\r\n        if(value === undefined) {\r\n            return\r\n        }\r\n        //validate and apply newRating\r\n        let newRating:number = 0;\r\n        if( value >= 0\r\n            && value <= this.numOfStars) {\r\n            newRating = value;\r\n        }\r\n        //limit max value to max number of stars\r\n        if(value > this.numOfStars) {\r\n            newRating = this.numOfStars;\r\n        }\r\n        this._rating = newRating;\r\n        //update ratingAsInteger. rating parsed to int for the value-[n] modifier\r\n        this.ratingAsInteger = parseInt(this._rating.toString());\r\n\r\n        //update halfStarsVisible\r\n        this.setHalfStarVisible();\r\n\r\n        //update calculated Color\r\n        this.setColor();\r\n\r\n        //fire onRatingChange event\r\n        let $event:IStarRatingOnUpdateEvent = {rating: this._rating};\r\n        if(typeof this.onRatingChange === 'function') {\r\n            this.onRatingChange({$event:$event});\r\n        }\r\n    }\r\n    get rating(): number {\r\n        return this._rating;\r\n    }\r\n\r\n    set showHalfStars(value: boolean) {\r\n        this._showHalfStars = !!value;\r\n        //update halfStarVisible\r\n        this.setHalfStarVisible();\r\n    }\r\n    get showHalfStars(): boolean {\r\n        return this._showHalfStars;\r\n    }\r\n\r\n    set showHoverStars(value: boolean) {\r\n        this._showHoverStars = !!value;\r\n    }\r\n    get showHoverStars(): boolean {\r\n        return this._showHoverStars;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = !!value;\r\n    }\r\n    get disabled(): boolean {\r\n        return this._disabled;\r\n    }\r\n\r\n    set readOnly(value: boolean) {\r\n        this._readOnly = !!value;\r\n    }\r\n    get readOnly(): boolean {\r\n        return this._readOnly;\r\n    }\r\n\r\n    set space(value: starRatingStarSpace) {\r\n        this._space = value;\r\n    }\r\n    get space(): starRatingStarSpace {\r\n        return this._space;\r\n    }\r\n\r\n    set starType(value: starRatingStarTypes) {\r\n        this._starType = value || StarRatingController.DefaultStarType;\r\n    }\r\n    get starType(): starRatingStarTypes {\r\n        return this._starType;\r\n    }\r\n\r\n    set size(value: starRatingSizes) {\r\n        this._size = value || StarRatingController.DefaultSize;\r\n    }\r\n    get size(): starRatingSizes {\r\n        return this._size;\r\n    }\r\n\r\n    set speed(value: starRatingSpeed) {\r\n        this._speed = value || StarRatingController.DefaultSpeed;\r\n    }\r\n    get speed(): starRatingSpeed {\r\n        return this._speed;\r\n    }\r\n\r\n    set labelPosition(value: starRatingPosition) {\r\n        this._labelPosition = value || StarRatingController.DefaultLabelPosition;\r\n    }\r\n    get labelPosition(): starRatingPosition {\r\n        return this._labelPosition;\r\n    }\r\n\r\n    set labelHidden(value: boolean) {\r\n        this._labelHidden = !!value;\r\n    }\r\n    get labelHidden(): boolean {\r\n        return this._labelHidden;\r\n    }\r\n\r\n\r\n    set staticColor(value: starRatingColors) {\r\n        this._staticColor = value || undefined;\r\n\r\n        //update color.\r\n        this.setColor();\r\n    }\r\n    get staticColor(): starRatingColors {\r\n        return this._staticColor;\r\n    }\r\n\r\n    set labelText(value: string) {\r\n        this._labelText = value;\r\n    }\r\n    get labelText(): string {\r\n        return this._labelText;\r\n    }\r\n\r\n    set id(value: string) {\r\n        this._id = value || (Math.random() * 10000).toString();\r\n    }\r\n    get id(): string {\r\n        return this._id;\r\n    }\r\n\r\n\r\n    getComponentClassNames():string {\r\n        let classNames:string[] = [];\r\n\r\n        classNames.push(this.rating?'value-'+this.ratingAsInteger:'value-0');\r\n        classNames.push(this.showHoverStars?'hover':'');\r\n        classNames.push(this.hoverRating?'hover-'+this.hoverRating:'hover-0');\r\n        classNames.push(this.halfStarVisible?'half':'');\r\n        classNames.push(this.space?'space-'+this.space:'');\r\n        classNames.push(this.labelHidden?'label-hidden':'label-visible');\r\n        classNames.push(this.labelPosition?'label-'+this.labelPosition:'');\r\n        classNames.push(this.color?'color-'+this.color:'');\r\n        classNames.push(this.starType?'star-'+this.starType:'');\r\n        classNames.push(this.speed);\r\n        classNames.push(this.size);\r\n        classNames.push(this.readOnly?'read-only':'');\r\n        classNames.push(this.disabled?'disabled':'');\r\n\r\n        return classNames.join(' ');\r\n    }\r\n\r\n    svgVisible():boolean {\r\n        return this.starType === \"svg\";\r\n    }\r\n\r\n    setColor() {\r\n        //check if custom function is given\r\n        if(typeof this.getColor === \"function\") {\r\n            this.color = this.getColor(this.rating, this.numOfStars, this.staticColor);\r\n        }\r\n        else {\r\n            this.color = StarRatingController._getColor(this.rating, this.numOfStars, this.staticColor);\r\n        }\r\n    }\r\n\r\n    setHalfStarVisible() {\r\n        //update halfStarVisible\r\n        if(this.showHalfStars) {\r\n\r\n            //check if custom function is given\r\n            if(typeof this.getHalfStarVisible === \"function\") {\r\n                this.halfStarVisible = this.getHalfStarVisible(this.rating);\r\n            } else {\r\n                this.halfStarVisible = StarRatingController._getHalfStarVisible(this.rating);\r\n            }\r\n\r\n        }\r\n        else {\r\n            this.halfStarVisible = false;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        //set default ctrl props\r\n        this.classEmpty = StarRatingController.DefaultClassEmpty;\r\n        this.classHalf = StarRatingController.DefaultClassHalf;\r\n        this.classFilled = StarRatingController.DefaultClassFilled;\r\n        this.pathEmpty = StarRatingController.DefaultSvgPathEmpty;\r\n        this.pathHalf = StarRatingController.DefaultSvgPathHalf;\r\n        this.pathFilled = StarRatingController.DefaultSvgPathFilled;\r\n\r\n        //set default Component Inputs\r\n        this._showHoverStars = StarRatingController.DefaultShowHoverStars;\r\n        this.labelHidden = StarRatingController.DefaultLabelHidden;\r\n        this._numOfStars = StarRatingController.DefaultNumOfStars;\r\n        this.stars = StarRatingController._getStarsArray(this.numOfStars);\r\n        this.setColor();\r\n\r\n        //set default Outputs\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * $onChanges\r\n     *\r\n     * The components $onChange hook\r\n     *\r\n     * @param changes\r\n     */\r\n    $onChanges(changes): void {\r\n        let valueChanged = function (key: string, changes): boolean {\r\n            if (key in changes) {\r\n                if (\r\n                    //(changes[key].previousValue != 'UNINITIALIZED_VALUE' && changes[key].currentValue !== undefined)\r\n                     changes[key].currentValue != changes[key].previousValue) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n\r\n        //---------------------------------------\r\n\r\n        //functions\r\n        //@Notice For some reason callback functions is not defined even there are defaults in the constructor\r\n        if (valueChanged('getColor', changes)) {\r\n            this.getColor = changes.getColor.currentValue;\r\n            this.setColor();\r\n        }\r\n\r\n        if (valueChanged('getHalfStarVisible', changes)) {\r\n            this.getHalfStarVisible = changes.getHalfStarVisible.currentValue;\r\n            this.setHalfStarVisible();\r\n        }\r\n\r\n        //boolean\r\n        if (valueChanged('showHalfStars', changes)) {\r\n            this.showHalfStars = changes.showHalfStars.currentValue;\r\n        }\r\n\r\n        if (valueChanged('space', changes)) {\r\n            this.space = changes.space.currentValue;\r\n        }\r\n\r\n        if (valueChanged('readOnly', changes)) {\r\n            this.readOnly = changes.readOnly.currentValue;\r\n        }\r\n\r\n        if (valueChanged('disabled', changes)) {\r\n            this.disabled = changes.disabled.currentValue;\r\n        }\r\n\r\n        if(valueChanged('labelHidden', changes)) {\r\n            this.labelHidden = changes.labelHidden.currentValue\r\n        }\r\n\r\n        //number\r\n        if (valueChanged('rating', changes)) {\r\n            this.rating = changes.rating.currentValue;\r\n        }\r\n\r\n        if (valueChanged('numOfStars', changes)) {\r\n            this.numOfStars = changes.numOfStars.currentValue;\r\n        }\r\n\r\n        //string\r\n        if (valueChanged('labelText', changes)) {\r\n            this.labelText = changes.labelText.currentValue;\r\n        }\r\n\r\n        if (valueChanged('staticColor', changes)) {\r\n            this.staticColor = changes.staticColor.currentValue;\r\n        }\r\n\r\n        if (valueChanged('size', changes)) {\r\n            this.size = changes.size.currentValue;\r\n        }\r\n\r\n        if (valueChanged('speed', changes)) {\r\n            this.speed = changes.speed.currentValue;\r\n        }\r\n\r\n        if (valueChanged('labelPosition', changes)) {\r\n            this.labelPosition = changes.labelPosition.currentValue;\r\n        }\r\n\r\n        if (valueChanged('starType', changes)) {\r\n            this.starType = changes.starType.currentValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * onStarClicked\r\n     *\r\n     * Is fired when a star is clicked. And updated the rating value.\r\n     * This function returns if the disabled or readOnly\r\n     * property is set. If provided it emits the onClick event\r\n     * handler with the actual rating value.\r\n     *\r\n     * @param rating\r\n     */\r\n    protected onStarClicked(rating: number): void {\r\n\r\n        if (!this.interactionPossible()) {\r\n            return;\r\n        }\r\n\r\n        this.rating = rating;\r\n\r\n        //fire onClick event\r\n        let $event:IStarRatingOnClickEvent = {rating: rating};\r\n        if(typeof this.onClick === 'function') {\r\n            this.onClick({$event:$event});\r\n        }\r\n    }\r\n\r\n    protected onStarHover(rating: number): void {\r\n\r\n        if (!this.interactionPossible() || !this.showHoverStars) {\r\n            return;\r\n        }\r\n\r\n        this.hoverRating = rating?parseInt(rating.toString()):0;\r\n        //fire onHover event\r\n        let $event:IStarRatingOnHoverEvent = { hoverRating: this.hoverRating};\r\n        if(typeof this.onHover === 'function') {\r\n            this.onHover({$event:$event});\r\n        }\r\n\r\n    }\r\n\r\n    protected interactionPossible():boolean {\r\n        return  !this.readOnly && !this.disabled;\r\n    }\r\n\r\n    /**\r\n     * Get the closest matching element up the DOM tree.\r\n     * @private\r\n     * @param  {Element} elem     Starting element\r\n     * @param  {String}  selector Selector to match against\r\n     * @return {Boolean|Element}  Returns null if not match found\r\n     */\r\n    protected getClosest ( elem, selector ) {\r\n\r\n        // Element.matches() polyfill\r\n        if (!Element.prototype.matches) {\r\n            Element.prototype.matches =\r\n                Element.prototype.matchesSelector ||\r\n                Element.prototype.mozMatchesSelector ||\r\n                Element.prototype.msMatchesSelector ||\r\n                Element.prototype.oMatchesSelector ||\r\n                Element.prototype.webkitMatchesSelector ||\r\n                function (s) {\r\n                    var matches = (this.document || this.ownerDocument).querySelectorAll(s),\r\n                        i = matches.length;\r\n                    while (--i >= 0 && matches.item(i) !== this) {\r\n                    }\r\n                    return i > -1;\r\n                };\r\n        }\r\n\r\n        // Get closest match\r\n        for (; elem && elem !== document; elem = elem.parentNode) {\r\n            if (elem.matches(selector)) return elem;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/star-rating.controller.ts","import {StarRatingController} from \"./star-rating.controller\";\r\nimport starRatingTpl = require('./star-rating.tpl.html');\r\n\r\nexport class StarRatingComponent implements ng.IComponentOptions {\r\n\r\n    public bindings: any;\r\n    public controller: any;\r\n    public templateUrl: string;\r\n    public replace: boolean;\r\n\r\n    constructor() {\r\n        this.bindings = {\r\n              id: '<'\r\n            , rating: '<'\r\n            , showHalfStars: '<'\r\n            , showHoverStars: '<'\r\n            , numOfStars: '<'\r\n            , size: '<'\r\n            , space: '<'\r\n            , staticColor: '<'\r\n            , disabled: '<'\r\n            , starType: '<'\r\n            , labelText: '<'\r\n            , labelHidden: '<'\r\n            , labelPosition: '<'\r\n            , speed : '<'\r\n            , readOnly: '<'\r\n            , getColor: '<'\r\n            , getHalfStarVisible: '<'\r\n\r\n            , onHover: '&'\r\n            , onClick: '&'\r\n            , onRatingChange: '&'\r\n        };\r\n        this.replace = true;\r\n        this.controller = StarRatingController;\r\n        this.templateUrl = <string>starRatingTpl;\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/star-rating.component.ts","var path = 'src/star-rating.tpl.html';\nvar html = \"<div id={{$ctrl.id}} class=rating ng-class=$ctrl.getComponentClassNames()> <div ng-show=$ctrl.labelText class=label-value>{{$ctrl.labelText}}</div> <div class=star-container ng-mouseleave=$ctrl.onStarHover()> <div class=star ng-repeat=\\\"star in $ctrl.stars track by $index\\\" ng-click=$ctrl.onStarClicked(star) ng-mouseover=$ctrl.onStarHover(star)> <i class=\\\"star-empty {{$ctrl.classEmpty}}\\\" ng-if=!$ctrl.svgVisible()></i> <i class=\\\"star-half {{$ctrl.classHalf}}\\\" ng-if=!$ctrl.svgVisible()></i> <i class=\\\"star-filled {{$ctrl.classFilled}}\\\" ng-if=!$ctrl.svgVisible()></i> <svg class=\\\"star-empty {{$ctrl.classEmpty}}\\\" ng-if=$ctrl.svgVisible()> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathEmpty}}></use> </svg> <svg class=\\\"star-half {{$ctrl.classHalf}}\\\" ng-if=$ctrl.svgVisible()> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathHalf}}></use> </svg> <svg class=\\\"star-filled {{$ctrl.classFilled}}\\\" ng-if=$ctrl.svgVisible()> <use xmlns:xlink=http://www.w3.org/1999/xlink xlink:href={{$ctrl.pathFilled}}></use> </svg> </div> </div> </div>\";\nwindow.angular.module('ng').run(['$templateCache', function(c) { c.put(path, html) }]);\nmodule.exports = path;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/star-rating.tpl.html\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}